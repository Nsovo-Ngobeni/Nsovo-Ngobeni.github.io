{"version":3,"sources":["Styles/ScoreBoard.module.css","Styles/Colours.module.css","Styles/Footer.module.css","Styles/Tile.module.css","Styles/Grid.module.css","Components/Scoreboard.tsx","Components/Tile.tsx","Components/Grid.tsx","Components/Colours.tsx","assets/reset.svg","assets/robot.svg","Components/Footer.tsx","Scripts/Vendor.ts","Scripts/Player.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","props","className","Styles","scoreBoard","Object","keys","score","map","name","nameIdx","style","color","header","Tile","id","rowIdx","colIdx","tile","onClick","onTileClick","text","tileState","Grid","grid","gridState","row","Colours","darkTheme","xColour","oColour","borderColour","bgColour","equalsColour","lightTheme","dotsContainer","dots","changeTheme","backgroundColor","Footer","container","btn","playAI","src","aiBtn","alt","resetGame","resetBtn","Vendor","checkWin","i","checkDraw","j","Player","move","currentPlayer","aiGrid","bestMove","bestScore","Infinity","isMaxing","this","possibleMoves","forEach","minimax","push","depth","Math","max","min","App","useState","setGridState","o","equals","x","scoreState","setScoreState","currentPlayerState","setCurrentPlayerState","gameState","setGameState","makeMove","newGridState","updateScore","newScore","theme","document","documentElement","setProperty","newGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6d5cbbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreBoard\":\"ScoreBoard_scoreBoard__15P7J\",\"header\":\"ScoreBoard_header__1i-hg\",\"score\":\"ScoreBoard_score__30RV3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dotsContainer\":\"Colours_dotsContainer__1G3A3\",\"dots\":\"Colours_dots__1MBSO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__oxrd4\",\"btn\":\"Footer_btn__3LRVo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__1BPPU\",\"text\":\"Tile_text__1hSWV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3OKnt\",\"row\":\"Grid_row__3epDA\",\"tile\":\"Grid_tile__X0Ky_\"};","import Styles from '../Styles/ScoreBoard.module.css';\r\n\r\ninterface scoreBoardProps {\r\n\tscore: score;\r\n}\r\n\r\ninterface score {\r\n\to: number;\r\n\tequals: number;\r\n\tx: number;\r\n}\r\n/**\r\n * @returns A JSX Element that will display the score\r\n */\r\nconst Scoreboard = (props: scoreBoardProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.scoreBoard}>\r\n\t\t\t{Object.keys(props.score).map((name: String, nameIdx: number) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tcolor: `var(--${name}-colour)`,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tkey={nameIdx}\r\n\t\t\t\t>\r\n\t\t\t\t\t<h1 className={Styles.header}>{name === 'equals' ? '=' : name}</h1>\r\n\t\t\t\t\t<h5 className={Styles.score}>{`${props.score[name as keyof score]} ${\r\n\t\t\t\t\t\tname === 'equals' ? 'draws' : 'wins'\r\n\t\t\t\t\t}`}</h5>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scoreboard;\r\n","import Styles from '../Styles/Tile.module.css';\r\n\r\ninterface tileProps {\r\n\ttileState: String;\r\n\trowIdx: number;\r\n\tcolIdx: number;\r\n\tonTileClick: (rowIdx: number, colIdx: number) => void;\r\n}\r\n/**\r\n * @returns A JSX element that shows a piece of the board\r\n */\r\nconst Tile = (props: tileProps) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tid={`r${props.rowIdx}c${props.colIdx}`}\r\n\t\t\tclassName={Styles.tile}\r\n\t\t\tonClick={() => props.onTileClick(props.rowIdx, props.colIdx)}\r\n\t\t>\r\n\t\t\t<h3\r\n\t\t\t\tclassName={Styles.text}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tcolor: `var(--${props.tileState}-colour)`,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{props.tileState}\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tile;\r\n","import Tile from './Tile';\r\nimport Styles from '../Styles/Grid.module.css';\r\n\r\ninterface gridProps {\r\n\tgridState: String[][];\r\n\tonTileClick: (rowIdx: number, colIdx: number) => void;\r\n}\r\n\r\n/**\r\n * @returns A JSX Element that renders the board\r\n */\r\nconst Grid = (props: gridProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.grid}>\r\n\t\t\t{props.gridState.map((row: Array<String>, rowIdx: number) => (\r\n\t\t\t\t<div id={`${rowIdx}`} className={Styles.row} key={rowIdx}>\r\n\t\t\t\t\t{row.map((tileState: String, colIdx: number) => (\r\n\t\t\t\t\t\t<Tile\r\n\t\t\t\t\t\t\tkey={colIdx}\r\n\t\t\t\t\t\t\ttileState={tileState}\r\n\t\t\t\t\t\t\trowIdx={rowIdx}\r\n\t\t\t\t\t\t\tcolIdx={colIdx}\r\n\t\t\t\t\t\t\tonTileClick={props.onTileClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Grid;\r\n","import Styles from '../Styles/Colours.module.css';\r\n\r\ninterface couloursProps {\r\n\tchangeTheme: (theme: theme) => void;\r\n}\r\n\r\ninterface theme {\r\n\txColour: string;\r\n\toColour: string;\r\n\tborderColour: string;\r\n\tbgColour: string;\r\n\tequalsColour: string;\r\n}\r\n\r\nconst Colours = (props: couloursProps) => {\r\n\tconst darkTheme: theme = {\r\n\t\txColour: '#03dac6',\r\n\t\toColour: '#bb86fc',\r\n\t\tborderColour: 'lightsteelblue',\r\n\t\tbgColour: '#151515',\r\n\t\tequalsColour: 'lightsteelblue',\r\n\t};\r\n\r\n\tconst lightTheme: theme = {\r\n\t\txColour: '#f38680',\r\n\t\toColour: '#69d2e7',\r\n\t\tborderColour: 'lightsteelblue',\r\n\t\tbgColour: '#f5f7ee',\r\n\t\tequalsColour: '#000000',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='Colours'>\r\n\t\t\t<div className={Styles.dotsContainer}>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={Styles.dots}\r\n\t\t\t\t\tid='darkTheme'\r\n\t\t\t\t\tonClick={() => props.changeTheme(darkTheme)}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: darkTheme.bgColour,\r\n\t\t\t\t\t}}\r\n\t\t\t\t></button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={Styles.dots}\r\n\t\t\t\t\tid='lightTheme'\r\n\t\t\t\t\tonClick={() => props.changeTheme(lightTheme)}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: lightTheme.bgColour,\r\n\t\t\t\t\t}}\r\n\t\t\t\t></button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Colours;\r\n","export default __webpack_public_path__ + \"static/media/reset.ff3a30b7.svg\";","export default __webpack_public_path__ + \"static/media/robot.83e309ae.svg\";","import resetBtn from '../assets/reset.svg';\r\nimport aiBtn from '../assets/robot.svg';\r\nimport Styles from '../Styles/Footer.module.css';\r\n\r\ninterface footerProps {\r\n\tresetGame: () => void;\r\n\tplayAI: () => void;\r\n}\r\n\r\n/**\r\n * @returns A JSX Element that houses game controls\r\n */\r\nconst Footer = (props: footerProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.container}>\r\n\t\t\t<img\r\n\t\t\t\tclassName={Styles.btn}\r\n\t\t\t\tonClick={props.playAI}\r\n\t\t\t\tsrc={aiBtn}\r\n\t\t\t\talt='Play AI'\r\n\t\t\t/>\r\n\t\t\t<img\r\n\t\t\t\tclassName={Styles.btn}\r\n\t\t\t\tonClick={props.resetGame}\r\n\t\t\t\tsrc={resetBtn}\r\n\t\t\t\talt='resetBtn'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","const Vendor = {\r\n\t/**\r\n\t *\r\n\t * @param gridState The current state of the board\r\n\t * @returns true if a player has won, returns false otherwise\r\n\t */\r\n\tcheckWin(gridState: String[][]) {\r\n\t\t// Check for wins vertically and horizontally\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tif (\r\n\t\t\t\t// Checks for wins on the rows\r\n\t\t\t\tgridState[i][0] === gridState[i][1] &&\r\n\t\t\t\tgridState[i][1] === gridState[i][2] &&\r\n\t\t\t\tgridState[i][0]\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (\r\n\t\t\t\t// Check for win on the coloums\r\n\t\t\t\tgridState[0][i] === gridState[1][i] &&\r\n\t\t\t\tgridState[1][i] === gridState[2][i] &&\r\n\t\t\t\tgridState[0][i]\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check for win diagonally\r\n\t\tif (\r\n\t\t\t(gridState[1][1] &&\r\n\t\t\t\tgridState[0][0] === gridState[1][1] &&\r\n\t\t\t\tgridState[1][1] === gridState[2][2]) ||\r\n\t\t\t(gridState[1][1] &&\r\n\t\t\t\tgridState[0][2] === gridState[1][1] &&\r\n\t\t\t\tgridState[1][1] === gridState[2][0])\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\t/**\r\n\t * Checks if there is a draw\r\n\t * @param gridState The current state of the board\r\n\t * @returns true if there is a draw, returns false otherwise\r\n\t */\r\n\tcheckDraw(gridState: String[][]) {\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (!gridState[i][j]) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n};\r\n\r\nexport default Vendor;\r\n","import Vendor from './Vendor';\r\n\r\nconst Player = {\r\n\t/**\r\n\t * Looks for the best possible move that can be made\r\n\t * @param gridState The current state of the board\r\n\t * @returns The co-ords of the move chosen by minimax algorithm\r\n\t */\r\n\tmove(gridState: String[][], currentPlayer: String) {\r\n\t\tlet aiGrid = [...gridState],\r\n\t\t\tbestMove = [1, 1],\r\n\t\t\tbestScore = currentPlayer === 'x' ? -Infinity : Infinity,\r\n\t\t\tisMaxing = currentPlayer === 'x';\r\n\t\tthis.possibleMoves(aiGrid).forEach((move) => {\r\n\t\t\tgridState[move[0]][move[1]] = currentPlayer;\r\n\t\t\tlet score = this.minimax(gridState, !isMaxing, 1);\r\n\t\t\tgridState[move[0]][move[1]] = '';\r\n\t\t\tif (isMaxing) {\r\n\t\t\t\tif (score > bestScore) {\r\n\t\t\t\t\tbestScore = score;\r\n\t\t\t\t\tbestMove = move;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (score < bestScore) {\r\n\t\t\t\t\tbestScore = score;\r\n\t\t\t\t\tbestMove = move;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn bestMove;\r\n\t},\r\n\t/**\r\n\t * Looks for and returns valid moves on the board\r\n\t * @param gridState The current state of the board\r\n\t * @returns An array containt all the valid moves that can be made\r\n\t */\r\n\tpossibleMoves(gridState: String[][]) {\r\n\t\tlet possibleMoves = [];\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (gridState[i][j]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tpossibleMoves.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn possibleMoves;\r\n\t},\r\n\t/**\r\n\t * An implementation of the minimax algorithm that will look through and evaluate all possible moves and return what it thinks is the best move\r\n\t * @param gridState The current state of the board\r\n\t * @param isMaxing Whether the player is trying to minimize or maximize the score\r\n\t * @param depth The depth the algorith is at / How many moves ahead it is\r\n\t */\r\n\tminimax(gridState: String[][], isMaxing: boolean, depth: number) {\r\n\t\t// Return the valuation of the gridState\r\n\t\tif (Vendor.checkWin(gridState)) {\r\n\t\t\treturn isMaxing ? -50 + depth : 50 - depth;\r\n\t\t} else if (Vendor.checkDraw(gridState)) {\r\n\t\t\treturn isMaxing ? depth : -depth;\r\n\t\t}\r\n\r\n\t\tif (isMaxing) {\r\n\t\t\tlet bestScore = -Infinity;\r\n\t\t\tthis.possibleMoves(gridState).forEach((move) => {\r\n\t\t\t\tgridState[move[0]][move[1]] = 'x';\r\n\t\t\t\tlet score = this.minimax(gridState, false, depth + 1);\r\n\t\t\t\tgridState[move[0]][move[1]] = '';\r\n\t\t\t\tbestScore = Math.max(bestScore, score);\r\n\t\t\t});\r\n\t\t\treturn bestScore;\r\n\t\t} else {\r\n\t\t\tlet bestScore = Infinity;\r\n\t\t\tthis.possibleMoves(gridState).forEach((move) => {\r\n\t\t\t\tgridState[move[0]][move[1]] = 'o';\r\n\t\t\t\tlet score = this.minimax(gridState, true, depth + 1);\r\n\t\t\t\tgridState[move[0]][move[1]] = '';\r\n\t\t\t\tbestScore = Math.min(bestScore, score);\r\n\t\t\t});\r\n\t\t\treturn bestScore;\r\n\t\t}\r\n\t},\r\n\r\n\t// minimax(gridState: String[][], isMaxing: boolean, depth: number) {\r\n\t// \t// Return evaluation of move\r\n\t// \tif (Vendor.checkWin(gridState)) {\r\n\t// \t\treturn {\r\n\t// \t\t\tscore: isMaxing ? 10 - depth : -10 + depth,\r\n\t// \t\t\tgridState: gridState,\r\n\t// \t\t\tdepth: depth,\r\n\t// \t\t};\r\n\t// \t} else if (Vendor.checkDraw(gridState)) {\r\n\t// \t\treturn {\r\n\t// \t\t\tscore: isMaxing ? -depth : +depth,\r\n\t// \t\t\tgridState: gridState,\r\n\t// \t\t\tdepth: depth,\r\n\t// \t\t};\r\n\t// \t}\r\n\r\n\t// \t// Recursivley calls minimax to find the moves valuation\r\n\t// \tif (isMaxing) {\r\n\t// \t\tlet bestScore = -Infinity;\r\n\t// \t\tthis.possibleMoves(gridState).forEach((move) => {\r\n\t// \t\t\tgridState[move[0]][move[1]] = 'x';\r\n\t// \t\t\tlet score = this.minimax(gridState, false, depth + 1).score;\r\n\t// \t\t\tgridState[move[0]][move[1]] = '';\r\n\t// \t\t\tbestScore = Math.max(bestScore, score);\r\n\t// \t\t});\r\n\t// \t\treturn { score: bestScore, gridState, depth: depth };\r\n\t// \t} else {\r\n\t// \t\tlet bestScore = Infinity;\r\n\t// \t\tthis.possibleMoves(gridState).forEach((move) => {\r\n\t// \t\t\tgridState[move[0]][move[1]] = 'o';\r\n\t// \t\t\tlet score = this.minimax(gridState, true, depth + 1).score;\r\n\t// \t\t\tgridState[move[0]][move[1]] = '';\r\n\t// \t\t\tbestScore = Math.min(bestScore, score);\r\n\t// \t\t});\r\n\t// \t\treturn { score: bestScore, gridState, depth: depth };\r\n\t// \t}\r\n\t// },\r\n};\r\n\r\nexport default Player;\r\n","import ScoreBoard from './Components/Scoreboard';\nimport Grid from './Components/Grid';\nimport Colours from './Components/Colours';\nimport Footer from './Components/Footer';\nimport './Styles/App.css';\nimport { useState } from 'react';\nimport Vendor from './Scripts/Vendor';\nimport Player from './Scripts/Player';\n\ninterface scoreBoard {\n\to: number;\n\tequals: number;\n\tx: number;\n}\n\ninterface theme {\n\toColour: string;\n\txColour: string;\n\tequalsColour: string;\n\tborderColour: string;\n\tbgColour: string;\n}\n\n/**\n * A tic-tac-toe app the supports offline PvP(current), PvE(will be added soon) and online PvP(will be added soon)\n * @returns A tic-tac-toe app\n */\nconst App = () => {\n\tconst [gridState, setGridState] = useState([\n\t\t['', '', ''],\n\t\t['', '', ''],\n\t\t['', '', ''],\n\t]);\n\n\tconst [scoreState, setScoreState] = useState({\n\t\to: 0,\n\t\tequals: 0,\n\t\tx: 0,\n\t});\n\n\tconst [currentPlayerState, setCurrentPlayerState] = useState('x');\n\n\tconst [gameState, setGameState] = useState(true);\n\n\t/**\n\t * Changes the theme of the app\n\t * @param theme The colours of the new theme\n\t */\n\tconst changeTheme = (theme: theme) => {\n\t\tdocument.documentElement.style.setProperty('--o-colour', theme.oColour);\n\t\tdocument.documentElement.style.setProperty('--x-colour', theme.xColour);\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t'--border-colour',\n\t\t\ttheme.borderColour\n\t\t);\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t'--background-colour',\n\t\t\ttheme.bgColour\n\t\t);\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t'--equals-colour',\n\t\t\ttheme.equalsColour\n\t\t);\n\t};\n\n\t/**\n\t * Handles a click on a tile\n\t * @param rowIdx The tiles x co-ord\n\t * @param colIdx The tiles y co-ord\n\t */\n\tconst onTileClick = (rowIdx: number, colIdx: number) => {\n\t\t// Blocks moves on tile if the tile is already occupied\n\t\tif (!gridState[rowIdx][colIdx] && gameState) {\n\t\t\tmakeMove(rowIdx, colIdx);\n\t\t}\n\t};\n\n\t/**\n\t * Makes the AI's move\n\t */\n\tconst playAI = () => {\n\t\tif (gameState) {\n\t\t\tlet newGrid = [...gridState];\n\t\t\tconst move = Player.move(newGrid, currentPlayerState);\n\t\t\tmakeMove(move[0], move[1]);\n\t\t}\n\t};\n\n\t/**\n\t * Makes a move on the board and switches the current player\n\t * @param rowIdx The tiles x co-ord\n\t * @param colIdx The tiles y co-ord\n\t */\n\tconst makeMove = (rowIdx: number, colIdx: number) => {\n\t\t// Ends the function if the move is invalid\n\t\tif (gridState[rowIdx][colIdx]) {\n\t\t\treturn;\n\t\t}\n\t\t// Updates gridState to reflect the move made\n\t\tlet newGridState = [...gridState];\n\t\tnewGridState[rowIdx][colIdx] = currentPlayerState;\n\t\tsetGridState(newGridState);\n\t\t// Checks for any potential updates to the game state and updates the score\n\t\tif (Vendor.checkWin(gridState)) {\n\t\t\tupdateScore(`${currentPlayerState}`);\n\t\t} else if (Vendor.checkDraw(gridState)) {\n\t\t\tupdateScore('equals');\n\t\t}\n\t\t// Changes the current player\n\t\tsetCurrentPlayerState(currentPlayerState === 'x' ? 'o' : 'x');\n\t};\n\n\t/**\n\t * Updates the game score\n\t * @param score The key of the score that will be updated\n\t */\n\tconst updateScore = (score: String) => {\n\t\tlet newScore = scoreState;\n\t\tnewScore[score as keyof scoreBoard] += 1;\n\t\tsetScoreState(newScore);\n\t\tsetGameState(false);\n\t};\n\n\t/**\n\t * Restarts the game and clears the board\n\t */\n\tconst resetGame = () => {\n\t\tsetGridState([\n\t\t\t['', '', ''],\n\t\t\t['', '', ''],\n\t\t\t['', '', ''],\n\t\t]);\n\t\tsetCurrentPlayerState('x');\n\t\tsetGameState(true);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<ScoreBoard score={scoreState} />\n\t\t\t<Grid gridState={gridState} onTileClick={onTileClick} />\n\t\t\t<Colours changeTheme={changeTheme} />\n\t\t\t<Footer resetGame={resetGame} playAI={playAI} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}