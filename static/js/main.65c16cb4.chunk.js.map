{"version":3,"sources":["Styles/ScoreBoard.module.css","Styles/Tile.module.css","Styles/Grid.module.css","Styles/Footer.module.css","Components/Tile.tsx","Components/Grid.tsx","Components/Scoreboard.tsx","assets/reset.svg","Components/Footer.tsx","Scripts/vendor.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Tile","props","id","rowIdx","colIdx","className","Styles","tile","onClick","onTileClick","text","style","color","tileState","Grid","grid","gridState","map","row","Scoreboard","scoreBoard","Object","keys","score","name","nameIdx","header","Footer","container","btn","resetGame","src","resetBtn","alt","Vendor","checkWin","i","checkDraw","App","useState","setGridState","o","x","scoreState","setScoreState","currentPlayer","setCurrentPlayer","gameState","setGameState","updateGridState","updatedGridState","updateScore","newScore","switchCurrentPlayer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65c16cb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreBoard\":\"ScoreBoard_scoreBoard__15P7J\",\"header\":\"ScoreBoard_header__1i-hg\",\"score\":\"ScoreBoard_score__30RV3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__1BPPU\",\"text\":\"Tile_text__1hSWV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3OKnt\",\"row\":\"Grid_row__3epDA\",\"tile\":\"Grid_tile__X0Ky_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__oxrd4\",\"btn\":\"Footer_btn__3LRVo\"};","import Styles from '../Styles/Tile.module.css';\r\n\r\ninterface tileProps {\r\n\ttileState: String;\r\n\trowIdx: number;\r\n\tcolIdx: number;\r\n\tonTileClick: (rowIdx: number, colIdx: number) => void;\r\n}\r\n\r\nconst Tile = (props: tileProps) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tid={`r${props.rowIdx}c${props.colIdx}`}\r\n\t\t\tclassName={Styles.tile}\r\n\t\t\tonClick={() => props.onTileClick(props.rowIdx, props.colIdx)}\r\n\t\t>\r\n\t\t\t<h3\r\n\t\t\t\tclassName={Styles.text}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tcolor: `var(--${props.tileState}-colour)`,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{props.tileState}\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tile;\r\n","import Tile from './Tile';\r\nimport Styles from '../Styles/Grid.module.css';\r\n\r\ninterface gridProps {\r\n\tgridState: String[][];\r\n\tonTileClick: (rowIdx: number, colIdx: number) => void;\r\n}\r\n\r\nconst Grid = (props: gridProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.grid}>\r\n\t\t\t{props.gridState.map((row: Array<String>, rowIdx: number) => (\r\n\t\t\t\t<div id={`${rowIdx}`} className={Styles.row} key={rowIdx}>\r\n\t\t\t\t\t{row.map((tileState: String, colIdx: number) => (\r\n\t\t\t\t\t\t<Tile\r\n\t\t\t\t\t\t\tkey={colIdx}\r\n\t\t\t\t\t\t\ttileState={tileState}\r\n\t\t\t\t\t\t\trowIdx={rowIdx}\r\n\t\t\t\t\t\t\tcolIdx={colIdx}\r\n\t\t\t\t\t\t\tonTileClick={props.onTileClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Grid;\r\n","import Styles from '../Styles/ScoreBoard.module.css';\r\n\r\ninterface scoreBoardProps {\r\n\tscore: score;\r\n}\r\n\r\ninterface score {\r\n\to: number;\r\n\t'=': number;\r\n\tx: number;\r\n}\r\n\r\nconst Scoreboard = (props: scoreBoardProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.scoreBoard}>\r\n\t\t\t{Object.keys(props.score).map((name: String, nameIdx: number) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tcolor: `var(--${name}-colour)`,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tkey={nameIdx}\r\n\t\t\t\t>\r\n\t\t\t\t\t<h1 className={Styles.header}>{name}</h1>\r\n\t\t\t\t\t<h5 className={Styles.score}>{`${props.score[name as keyof score]} ${\r\n\t\t\t\t\t\tname === '=' ? 'draws' : 'wins'\r\n\t\t\t\t\t}`}</h5>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scoreboard;\r\n","export default __webpack_public_path__ + \"static/media/reset.ede1a9b7.svg\";","import resetBtn from '../assets/reset.svg';\r\nimport Styles from '../Styles/Footer.module.css';\r\n\r\ninterface footerProps {\r\n\tresetGame: () => void;\r\n}\r\n\r\nconst Footer = (props: footerProps) => {\r\n\treturn (\r\n\t\t<div className={Styles.container}>\r\n\t\t\t<img\r\n\t\t\t\tclassName={Styles.btn}\r\n\t\t\t\tonClick={props.resetGame}\r\n\t\t\t\tsrc={resetBtn}\r\n\t\t\t\talt='resetBtn'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","const Vendor = {\r\n\tcheckWin(gridState: String[][]) {\r\n\t\t// Check for wins vertically and horizontally\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tif (\r\n\t\t\t\t// Checks for wins on the rows\r\n\t\t\t\tgridState[i][0] === gridState[i][1] &&\r\n\t\t\t\tgridState[i][1] === gridState[i][2] &&\r\n\t\t\t\tgridState[i][0]\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (\r\n\t\t\t\t// Check for win on the coloums\r\n\t\t\t\tgridState[0][i] === gridState[1][i] &&\r\n\t\t\t\tgridState[1][i] === gridState[2][i] &&\r\n\t\t\t\tgridState[0][i]\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check for win diagonally\r\n\t\tif (\r\n\t\t\t(gridState[1][1] &&\r\n\t\t\t\tgridState[0][0] === gridState[1][1] &&\r\n\t\t\t\tgridState[1][1] === gridState[2][2]) ||\r\n\t\t\t(gridState[1][1] &&\r\n\t\t\t\tgridState[0][2] === gridState[1][1] &&\r\n\t\t\t\tgridState[1][1] === gridState[2][0])\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\tcheckDraw(gridState: String[][]) {\r\n\t\tif (\r\n\t\t\tgridState[0][0] &&\r\n\t\t\tgridState[0][1] &&\r\n\t\t\tgridState[0][2] &&\r\n\t\t\tgridState[1][0] &&\r\n\t\t\tgridState[1][1] &&\r\n\t\t\tgridState[1][2] &&\r\n\t\t\tgridState[2][0] &&\r\n\t\t\tgridState[2][1] &&\r\n\t\t\tgridState[2][2]\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n};\r\n\r\nexport default Vendor;\r\n\r\n\t","import Grid from './Components/Grid';\nimport ScoreBoard from './Components/Scoreboard';\nimport Footer from './Components/Footer';\nimport './Styles/App.css';\nimport { useState } from 'react';\nimport Vendor from './Scripts/vendor';\n\ninterface scoreBoard {\n\to: number;\n\t'=': number;\n\tx: number;\n}\n\nfunction App() {\n\tconst [gridState, setGridState] = useState([\n\t\t['', '', ''],\n\t\t['', '', ''],\n\t\t['', '', ''],\n\t]);\n\n\tconst [scoreState, setScoreState] = useState({\n\t\to: 0,\n\t\t'=': 0,\n\t\tx: 0,\n\t});\n\n\tconst [currentPlayer, setCurrentPlayer] = useState('x');\n\n\tconst [gameState, setGameState] = useState(true);\n\n\tconst onTileClick = (rowIdx: number, colIdx: number) => {\n\t\tif (!gridState[rowIdx][colIdx] && gameState) {\n\t\t\tupdateGridState(rowIdx, colIdx);\n\t\t\tswitchCurrentPlayer();\n\t\t\tif (Vendor.checkWin(gridState)) {\n\t\t\t\tupdateScore(`${currentPlayer}`);\n\t\t\t} else if (Vendor.checkDraw(gridState)) {\n\t\t\t\tupdateScore('=');\n\t\t\t}\n\t\t}\n\t};\n\n\tconst updateGridState = (rowIdx: number, colIdx: number) => {\n\t\tlet updatedGridState = gridState;\n\t\tupdatedGridState[rowIdx][colIdx] = currentPlayer;\n\t\tsetGridState(updatedGridState);\n\t};\n\n\tconst updateScore = (score: String) => {\n\t\tlet newScore = scoreState;\n\t\tnewScore[score as keyof scoreBoard] += 1;\n\t\tsetScoreState(newScore);\n\t\tsetGameState(false)\n\t};\n\n\tconst resetGame = () => {\n\t\tsetGridState([\n\t\t\t['', '', ''],\n\t\t\t['', '', ''],\n\t\t\t['', '', ''],\n\t\t]);\n\t\tsetCurrentPlayer('x');\n\t\tsetGameState(true);\n\t};\n\n\tconst switchCurrentPlayer = () => {\n\t\tcurrentPlayer === 'x' ? setCurrentPlayer('o') : setCurrentPlayer('x');\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<ScoreBoard score={scoreState} />\n\t\t\t<Grid gridState={gridState} onTileClick={onTileClick} />\n\t\t\t<Footer resetGame={resetGame} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}